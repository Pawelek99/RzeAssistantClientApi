/**
 * KnowYourPlace API
 * API do 'Aplikacja dla student√≥w zagranicznych'.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Article from '../model/Article';
import CreateArticleDto from '../model/CreateArticleDto';
import InlineResponse201 from '../model/InlineResponse201';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse40410 from '../model/InlineResponse40410';
import InlineResponse4049 from '../model/InlineResponse4049';
import UpdateArticleDto from '../model/UpdateArticleDto';
import UpdateArticleRatingDto from '../model/UpdateArticleRatingDto';

/**
* Articles service.
* @module api/ArticlesApi
* @version 0.0.1
*/
export default class ArticlesApi {

    /**
    * Constructs a new ArticlesApi. 
    * @alias module:api/ArticlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the articleControllerCreate operation.
     * @callback module:api/ArticlesApi~articleControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new article
     * @param {module:api/ArticlesApi~articleControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    articleControllerCreate(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/api/v1/articles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the articleControllerFindById operation.
     * @callback module:api/ArticlesApi~articleControllerFindByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Article} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an article by id
     * @param {module:api/ArticlesApi~articleControllerFindByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Article}
     */
    articleControllerFindById(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Article;

      return this.apiClient.callApi(
        '/api/v1/articles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the articleControllerFindByPhrase operation.
     * @callback module:api/ArticlesApi~articleControllerFindByPhraseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *        Returns a list of articles containing phrase in title, content, date or category.       If the phrase is empty, returns all articles.     
     * @param {module:api/ArticlesApi~articleControllerFindByPhraseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    articleControllerFindByPhrase(phrase, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'phrase': phrase
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Article];

      return this.apiClient.callApi(
        '/api/v1/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the articleControllerUpdate operation.
     * @callback module:api/ArticlesApi~articleControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Article} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an article by id
     * @param {module:api/ArticlesApi~articleControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Article}
     */
    articleControllerUpdate(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Article;

      return this.apiClient.callApi(
        '/api/v1/articles/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the articleControllerUpdateDislikesById operation.
     * @callback module:api/ArticlesApi~articleControllerUpdateDislikesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Article} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates dislike count of the article
     * @param {module:api/ArticlesApi~articleControllerUpdateDislikesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Article}
     */
    articleControllerUpdateDislikesById(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Article;

      return this.apiClient.callApi(
        '/api/v1/articles/{id}/dislikes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the articleControllerUpdateLikesById operation.
     * @callback module:api/ArticlesApi~articleControllerUpdateLikesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Article} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates like count of the article
     * @param {module:api/ArticlesApi~articleControllerUpdateLikesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Article}
     */
    articleControllerUpdateLikesById(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Article;

      return this.apiClient.callApi(
        '/api/v1/articles/{id}/likes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
